buildscript {
    repositories { flatDir name: 'libs', dirs: "../libs" }
    dependencies { classpath 'com.hoddmimes.versionplugin:versionplugin:1.0' }
}

plugins {
    id 'java'
}


repositories {
    mavenCentral()
}

apply plugin: 'com.hoddmimes.versionplugin'

def trnsVrs = tasks.transformVersion.version()

tasks.register('generateTestClasses', JavaExec) {
    mainClass = 'JsonTransform'
    classpath = project.project(':transform').sourceSets.main.runtimeClasspath
    args "-xml","./xml/TestMessagesFileSet.xml","-xslDir","../transform/src/main/resources/"
}



task buildTestJar (type: Jar) {
    dependsOn(':transform:buildGenerateJar')
    archiveBaseName = 'pojojson-tests'
    destinationDirectory = file("../libs/")
    archiveVersion = "$trnsVrs"

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } with jar

    from {
        zipTree("../libs/pojojson-generate-" + "$trnsVrs" + ".jar")
    } with jar

    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"

    duplicatesStrategy = 'exclude'

    manifest {
        attributes 'Implementation-Title': 'JsonTransformTest', 'Implementation-Version': archiveVersion
    }

    from('build/classes') {
        include '**/*.class'
    }

    doLast {
        def testJar ="pojojson-tests-" + "$trnsVrs" + ".jar"
        print("***** Built JAR $testJar")
    }
}


task buildPojoJar (type: Jar) {
    archiveBaseName = 'pojojson'
    destinationDirectory = file("../libs/")
    archiveVersion = "$trnsVrs"

    from('build/classes/java/main/') {
        include '**/transform/*.class'
    }
    doLast {
        def pojoJar ="pojojson-" + "$trnsVrs" + ".jar"
        print("***** Built JAR $pojoJar\n")
    }
}

task buildJars() {
    dependsOn( buildPojoJar )
    dependsOn( buildTestJar )
}



task deleteGenerated( type: Delete ) {
    def generateJar = "../libs/pojojson-" + "$trnsVrs" + ".jar"
    delete "$generateJar"

    def testJar ="../libs/pojojson-tests-" + "$trnsVrs" + ".jar"
    delete "$testJar"

    delete fileTree('./src/main/java/generated') {
        include '*.java'
    }

    doLast {
        print("***** Delete $testJar jar $generateJar and generated test message objects")
    }

}


compileJava.dependsOn('generateTestClasses')

build.finalizedBy(buildJars)
clean.dependsOn(deleteGenerated)


dependencies {
    implementation project(':transform')
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.6'
    implementation group: 'com.github.erosb', name: 'everit-json-schema', version: '1.14.1'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
    implementation group: 'com.jsoniter', name: 'jsoniter', version: '0.9.23'
    implementation group: 'org.mongodb', name: 'mongo-java-driver', version: '3.8.2'
    implementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}