

allprojects {
	    group = "com.hoddmimes.jsontransform"
	    version = 1.1

}
subprojects {
        apply plugin: 'java'

    sourceCompatibility = 1.8

    sourceSets {
       main {
          java {
            srcDir 'java/main'
          }
       }
       test {
         java {
            srcDir 'java/test'
        }
      }
   }

    repositories {
         mavenCentral()
    }


   dependencies {
       implementation group: 'com.github.erosb', name: 'everit-json-schema-jdk6', version: '1.9.2'
       implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
       implementation group: 'com.jsoniter', name: 'jsoniter', version: '0.9.23'
       implementation group: 'org.mongodb', name: 'mongo-java-driver', version: '3.8.2'
       implementation group: 'junit', name: 'junit', version: '4.12'
       implementation group: 'xalan', name: 'xalan', version: '2.7.2'
       implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
   }
}


project(':jtransform') {

    task buildGenerateJar (type: Jar) {
        baseName = 'pojojson-generate';
        destinationDir = file("../")

        from {
            configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        } with jar


        from('build/classes/java/main') {
            include '**/*.class'
        }

        from('xsl') {
            include '*.xsl'
        }

        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"

        duplicatesStrategy = 'exclude'

        manifest {
            attributes 'Implementation-Title': 'JsonTransform', 'Implementation-Version': version
        }

        doLast {
            println('Generate JsonTransform JAR successfully built!')
        }
    }

    
    build.finalizedBy(buildGenerateJar)
}




project(':sample') {

    task(generateTestClasses, type: JavaExec) {
        main = 'JsonTransform'
        classpath = files('../pojojson-generate-1.1.jar')
        args "-xml","./xml/TestMessagesFileSet.xml"
    }

    
    task buildJars() {
        dependsOn 'buildPOJOJSONJar'
        dependsOn 'buildTestJar'
        
        doLast {
            println('Successfully build the pojojson and pojojson-test JARS !') 
        }
    }


    task buildTestJar (type: Jar) {
        baseName = 'pojojson-tests';
        destinationDir = file("../")

        from {
            zipTree('./pojojson-generate-' + version + '.jar')
        } with jar

        from('out/test/classes') {
            include '**/*.class'
        }




    }

    
    task buildPOJOJSONJar (type: Jar) {
        baseName = 'pojojson';
        destinationDir = file("../")

        from('build/classes/java/main/') {
            include '**/jsontransform/*.class'
        }
    }

    compileJava.dependsOn('generateTestClasses')
    build.finalizedBy(buildJars) 
    
    dependencies {
        implementation project(':jtransform')
    }
}










