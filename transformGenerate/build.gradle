import groovy.json.JsonSlurper

buildscript {
    repositories { flatDir name: 'libs', dirs: "../libs" }
    dependencies { classpath 'com.hoddmimes.versionplugin:versionplugin:1.0' }
}

plugins {
    id 'java'
}


// Set version from version.json file
def jsonSlurper = new JsonSlurper()
def bld = jsonSlurper.parse(new File("$project.rootDir/version.json"))
version = "$bld.major" + "." + "$bld.minor"

apply plugin: 'com.hoddmimes.versionplugin'


VersionTask {
    versionFile = "$project.rootDir/version.json"
}

tasks.register('bumpMinorVersion', com.hoddmimes.versionplugin.VersionTask) {
    action = "minor"
}

tasks.register('bumpMajorVersion', com.hoddmimes.versionplugin.VersionTask) {
    action = "major"
}


repositories {
    mavenCentral()
}





task buildGenerateJar (type: Jar) {
    archiveBaseName = 'pojojson-generate';
    destinationDirectory = file("../libs")
    archiveVersion = tasks.transformVersion.version()

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } with jar


    from('build/classes/java/main') {
        include '**/*.class'
    }

    //from('xsl') {
    //    include '*.xsl'
    // }

    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"

    duplicatesStrategy = 'exclude'

    manifest {
        attributes 'Implementation-Title': 'JsonTransform', 'Implementation-Version': archiveVersion,  'Main-Class': 'JsonTransform'
    }


    doLast {
        def generateJar = "../libs/pojojson-generate-" + "$archiveVersion" + ".jar"
        println('***** Built $generateJar')
    }
}

task deleteGenerateJar( type: Delete ) {
    def generateJar = "../libs/pojojson-generate-" + "$version" + ".jar"
    delete "$generateJar"
    doLast {
        println("***** Deleted $generateJar JAR from ../libs!")
    }
}


classes.finalizedBy(buildGenerateJar)
clean.dependsOn(deleteGenerateJar)

dependencies {
    implementation group: 'net.sf.saxon', name: 'Saxon-HE', version: '12.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}